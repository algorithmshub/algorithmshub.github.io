(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./src/docs/documentation/maths/maxlist.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),s=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),o=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js"),m=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),r=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),l=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js"),i=a("./node_modules/react/index.js"),p=a.n(i),c=a("./node_modules/@mdx-js/tag/dist/index.js"),u=function(e){function n(e){var a;return Object(s.a)(this,n),(a=Object(m.a)(this,Object(r.a)(n).call(this,e))).layout=null,a}return Object(l.a)(n,e),Object(o.a)(n,[{key:"render",value:function(){var e=this.props,n=e.components;Object(t.a)(e,["components"]);return p.a.createElement(c.MDXTag,{name:"wrapper",components:n},p.a.createElement(c.MDXTag,{name:"h1",components:n,props:{id:"maxlist"}},"MaxList"),p.a.createElement(c.MDXTag,{name:"p",components:n},p.a.createElement(c.MDXTag,{name:"strong",components:n,parentName:"p"},"Example")),p.a.createElement(c.MDXTag,{name:"p",components:n},"Find the maximum number of an array."),p.a.createElement(c.MDXTag,{name:"p",components:n},p.a.createElement(c.MDXTag,{name:"strong",components:n,parentName:"p"},"Java")),p.a.createElement(c.MDXTag,{name:"pre",components:n},p.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js"}},"public class MaxList {\n  public static void main(String[] args) {\n    int result = findMax(new int[]{ 12, 35, 7, 10, 34, 2 });\n    System.out.println(result);\n  }\n\n  /**\n   * Find the maximum number of an array\n   *\n   * @param a the array contains element\n   * @return max value of given array\n   */\n  public static int findMax(int[] a) {\n    int maxValue = a[0];\n\n    for (int i = 1; i < a.length; i++) {\n      if (a[i] > maxValue) {\n        maxValue = a[i];\n      }\n    }\n\n    return maxValue;\n  }\n}\n")))}}]),n}(p.a.Component);"undefined"!==typeof u&&u&&u===Object(u)&&Object.defineProperty(u,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/documentation/maths/maxlist.mdx"}}),"undefined"!==typeof u&&u&&u===Object(u)&&Object.defineProperty(u,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/documentation/maths/maxlist.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-documentation-maths-maxlist.7525b397f474250a8b7d.js.map